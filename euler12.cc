/*Highly divisible triangular number
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>     // std::cout, std::end
#include "eulerNumbers.h"
#include "eulerUtilities.h" //isMultiple()

using namespace std;



int main() {
	int numDivisors = 0;
	int num = 1;
	
	while(numDivisors <= FIVEOHONE) {//501 because looking for over 500)
		for(int i = 1; i < num; i++) {
			if(isMultiple(num, i)) {
				numDivisors++;
			}
		}
		cout << num << " has " << numDivisors << " number of divisors" << endl;
		numDivisors = 0;
		num++;
	}
	cout << "The lowest number with over 500 divisors is: " << num << endl;
	
}
