// Even Fibonacci numbers

//By considering the terms in the Fibonacci sequence whose 
//	values do not exceed four million, find the sum of 
//	the even-valued terms.

// Each new term in the Fibonacci sequence is generated by 
//	adding the previous two terms. By starting with 
//	1 and 2, the first 10 terms will be:
//	1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...


// note: because problem calls for summing all even values
//	under 4 million, a 32 bit number may be used to
//	contain the values BUT a long will be required to
//	contain total.

#include <iostream>     // std::cout, std::end
#include "eulerNumbers.h"

using namespace std;
//PRE: fibValue is either user given or 4 million (default)
//	note: total is passed by reference, contains
//	return value of sum of even fib values under 
//  value given or the default value of 4 mil
//POST: total contains the sum of all even values in the 
//  Fibonacci sequence under the <fibValue> 
void fib(int fibValue, int num1, int num2, long int &total) {
	int fibNum = 0;//to hold value of newest fib num
	//base case for termination is value less than 4 million
	if((num1 > fibValue) || (num2 > fibValue)) {
		//one number exceeds the given value or 4 million
		//TODO: Figure out if I want to do something with this
	}
	//recursive case
	else {//nums are less than given value or 4 million
		//get fib num
		fibNum = num1 + num2;
           //cout << "FibNum = " << fibNum << endl;// <------for testing only
		//check if even
		if(fibNum % TWO == 0) {
			//if even, add to total
			total = total + fibNum;
		}
		//recurse
		fib(fibValue, num2, fibNum, total);
	}
} 

int main(int argc, char*argv[]) {
	long int total = 0;  // to hold sum of even values
	int fValue = 0;      // to hold user given value or default 
	cout << "This program adds all even Fibonacci numbers until " << endl;
	cout << "the number given or four million by default" << endl;
	cout << "Please enter a number less than five million" << endl;
	cout << "Or enter 0 (zero) to use the default value of ";
	cout << "four million" << endl;
	cin >> fValue;
	if((fValue > FIVEMIL) || (fValue < 1)) {
		//ASSERT: User given value not within bounds, use default of 4mil
		fValue = FOURMIL;
		//ASSERT: fValue now reflects default value of 4 mil
	}
	fib(fValue,0,1,total);
	cout << "Total = " << total << endl;
	return(0);
}
